---
layout: post
title: Linux - 内核同步介绍（读书笔记）
---

## 1. 临界区和竞争条件
临界区（也叫临界段，Critical Section）就是访问和操作共享数据的代码段。为了避免在临界区并发访问，编程者需要保证这些代码原子地执行，也就是说在执行结束前不可以被打断，就如同整个临界区就是一个不可分割的指令一样。

竞争条件（race condition）就是两个线程处于同一个临界区执行，避免并发和防止竞争条件成为同步。

造成并发的原因：

* 中断
* 软中断和tasklet
* 内核抢占
* 睡眠及与用户空间的同步
* 对称多处理

## 2. 加锁
锁确保一次只有一个线程对资源进行访问。Linux提供了多种锁机制。要给数据加锁而不是代码。

## 3. 死锁
有一个或多个执行线程和一个或多个资源，每个线程都在等待其中的一个资源，但所有的资源都已经被占用。所有线程都在相互等待，但他们永远不会释放已经占有的资源。

自死锁：一个线程师徒去获取一个自己已经持有的锁，自己没有机会释放锁。

加锁按次序进行！！！最好按照锁的获得相反顺序来释放锁。

## 4. 竞争和扩展性
锁的争用（lock contention），简称争用。当锁正在被占用，其他线程试图获得该锁，就说一个锁处于高度争用状态。高度争用的锁会成为系统的瓶颈。

扩展性（scalability）是对系统可扩展程度的一个度量。





