---
layout: post
title: Linux - 系统调用（读书笔记）
---
系统调用在用户控件和硬件设备间添加了一个中间层。作用：
1. 它为用户控件提供了一种硬件的抽象接口
2. 系统调用保证了系统的稳定和安全
3. 让每个进程运行在虚拟系统中

一般情况下，应用程序通过在用户控件实现的应用编程接口API而不是通过系统调用来编程。

windows虽然是非unix系统，也提供了与POSIX的兼容库。

C库也提供了POSIX的绝大部分API。

Linux系统调用都被赋予一个系统调用号，通过这个独一无二的号就可以关联系统调用。内核记录了系统调用表中所有已经注册过的系统调用列表，存储在sys_call_table中。

用户控件程序无法直接执行内核代码，他们不能直接调用内核控件函数。而是通过某种方式告诉内核，自己需要执行一个系统调用。通知内核的机制是靠 `软中断` 实现的。x86系统上预定义的软中断号是128.

调用号一般通过寄存器传递（x86使用eax），参数也放在寄存器里（x86里按照ebx、ecx、edx、esi、edi存放前5个参数，多余5个用一个寄存器存放内存地址指针），返回值也通过寄存器传递（x86放在eax中）。

系统调用的实现很简单，但是一般不要添加新的系统调用。